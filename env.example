# HTTPS/Let's Encrypt Configuration
# API token for Gandi DNS (required for automatic Let's Encrypt certificates)
# Get this from: https://account.gandi.net → Security → Generate API key
# This is used for DNS-01 challenge validation
GANDI_API_TOKEN=your_gandi_api_token_here

# DoorBird Configuration
# Replace these values with your DoorBird device's actual settings

# The base URL of your DoorBird device (without trailing slash)
# Example: http://192.168.1.100 or http://doorbird.local
DOORBIRD_URL=http://192.168.1.100

# DoorBird username (typically 6 characters + 4 digits)
# You can find this in the DoorBird app under Settings → Administration
DOORBIRD_USER=abcdef0001

# DoorBird password
# This is the password you set for the user account
DOORBIRD_PASSWORD=your_password_here

# WebRTC Configuration
# 
# For split-brain DNS / dual network topology (LAN + public internet):
# Set both HOST_IP (public) and HOST_IP_LAN (private) to advertise multiple ICE candidates.
# This allows:
# - Internal LAN clients to connect directly via private IP (fast, no router traversal)
# - External clients to connect via public IP (NAT forwarding)
# - No dependency on router hairpin NAT support
#
# The server will advertise BOTH IPs as ICE candidates, and WebRTC will automatically
# select the best route (LAN clients use LAN IP, external clients use public IP).
#
# HOST_IP: Your public IP or the IP external clients should connect to.
# (This would be your docker host's LAN IP if you are hosting privately)
HOST_IP=x.x.x.x

# HOST_IP_LAN: Your server's local LAN IP (optional, for split-brain DNS)
# If set, both IPs will be advertised. If not set, only HOST_IP is used.
# Example: Your Docker host's LAN IP
HOST_IP_LAN=192.168.1.50

# Legacy single-IP setup:
# - For Docker: Set HOST_IP to your host machine's LAN IP (required)
# - For native runs: Optional, will auto-detect your LAN IP if not set
# If HOST_IP_LAN is not set, behavior is unchanged from before.

# UDP port for WebRTC media (ICE/STUN)
# This port must be exposed in your Docker configuration
UDP_PORT=50000

# Audio Fanout Configuration
# Number of audio samples to buffer in the fanout queue
# Each sample is 20ms, so this directly affects audio latency
# Lower values = lower latency but more susceptible to dropouts/crackling
# Higher values = smoother playback but noticeable delay in two-way communication
# For intercom use, lower latency is generally preferred
# Recommended: 20-30 samples (400-600ms)
AUDIO_FANOUT_BUFFER_SAMPLES=20

# Video Fanout Configuration
# Number of video frames to buffer in the fanout queue
# Lower values = lower latency but more frame drops
# Higher values = higher latency but smoother video
# Recommended: 4-5 frames (~330-420ms @ 12fps)
VIDEO_FANOUT_BUFFER_FRAMES=4

# RTSP Transport Protocol
# Protocol to use for RTSP video streaming from DoorBird
# Options: "udp" or "tcp"
# 
# - udp: Lower latency, less overhead (default for simple networks)
# - tcp: More reliable, required for complex network scenarios
# 
# ⚠️  USE TCP IF:
# - Running through VPN (Tailscale, WireGuard, OpenVPN, etc.)
# - Running through Docker with complex networking
# - Experiencing video stream failures, timeouts, or hangs
# - Network has high packet loss or uses nested UDP tunneling
# 
# UDP-over-UDP (e.g., RTSP UDP through WireGuard VPN) causes:
# - Packet loss amplification
# - Timeout conflicts between layers
# - NAT traversal issues
# - Stream reliability problems
RTSP_TRANSPORT_PROTOCOL=udp

# Logging Configuration
# Set to one of: trace, debug, info, warn, error
# Use "info" for normal operation, "debug" for troubleshooting
RUST_LOG=info
